/cn/mbtoken3/mbtoken3_upgrade_determin_v2?uin=68159276&sess_id=a27UPJlW24DjmrEBJ8i4tBkqLxs2R3SZ&data=3C170BC265DC9C6E18CCCB7A801A2DFC68235A41672F99271F6846CC904B3700BCEE92B84424CCB1DCFD61C28CD3965198E12BCFB3DC191161666BCE47A5533B49AE5E194CC61BB91C61209443DBBD11F2D53C4F6369C9BC

3C170BC265DC9C6E18CCCB7A801A2DFC68235A41672F99271F6846CC904B3700BCEE92B84424CCB1DCFD61C28CD3965198E12BCFB3DC191161666BCE47A5533B49AE5E194CC61BB91C61209443DBBD11F2D53C4F6369C9BC
CAF60A6E2D69D12BB85F6865EEDEA11C7AB9C85B2CF675D20D867E4188AC91C9D35F6B531DE906492337FFABA24BBB30592DF73F246AB3076EDA3FAD832667F8

3C170BC265DC9C6E18CCCB7A801A2DFC68235A41672F99271F6846CC904B3700BCEE92B84424CCB1DCFD61C28CD3965198E12BCFB3DC191161666BCE47A5533B49AE5E194CC61BB91C61209443DBBD11F2D53C4F6369C9BC
0FE8185896A36C79DC9DEFA3C07B413FF230F463110DADDBAAED265832681A995CE050FA3B6D686485AFA372B6F63149232B889FF3422DBA6BB66570097B77A8E5B1665CEF47278AEC5A14F09AC3EA1DE0160A47D9821667
923E4FC9FAF8D812E58894B707C532F8D95C59708BDB5FEC1096E700DC7274F78697CBBA262AB1E4F02E5D8FA60772079B1CF27E8923342BB4A6A5029B5EA43CFAB1CD8C342639566657D70EB931551F6C537D5D02884E47
DA69B52726D70DE843E6CB6CA1214E40C49EEC99119190A4887DA8385166235784133476DE0169F4235CF0AA9177AC8C8B25D2BB27E87A9A44C49087B4D955E18658C7AEF75D9D37AB3C5133DC9C04D224E5BF09D58D8E01
2C56451DD35318604008C17BDE50176A2FFC717832F6BD78AA9F94E3F35A558F22440AD45E47B0BA53C9E1F4F400650E2A482498D7784FD81A9BE574BA87A86632EB5C9704CBE3CCECEE1EBA92F0BB3D5FC5BB0602CDD644

86CEB3BF0504AD2E4E856C812268828A9AC288D7F6E14C849D783D0E9C3B3BCF270040C5E2D4331C65DC2D859C186486488E266D84BBE7308E60B3279CF9C8AC0538C3A8201F3732F54007429916B60C6269E4B712901AB51A792940632897FD68535141B71809F3E4F44D532E91404E
3C170BC265DC9C6E18CCCB7A801A2DFC68235A41672F99271F6846CC904B3700BCEE92B84424CCB1DCFD61C28CD3965198E12BCFB3DC191161666BCE47A5533B49AE5E194CC61BB91C61209443DBBD11F2D53C4F6369C9BC
917808241A1C79C1A202C08C78B9C216F7808D1A94F5D499C0BBC6510A98454F44F9433B414D6660021ACFB0FE683470F629C99DE415774DCA67AE37DA07F778F47C9CF6E3EB5D32AEDA95F7E8D803C2D34C12E32288D462


BE31ADDDA270A36361AC091428D94F4B7EF66CFF495D30108BAFD257A940D8DC1CD2D4847D131080B76BF7EFBAA6BA8A1BE41FE302EE91FD33F4F01655F7D7ED41AD8AB7CE5DB7EDDFA717149D1798AD00860AF357986B74
7FADD81FA8200C7F227AF3F6909A674423A3ED3C4835CD19588974FB4176E03B304037E2F456C84E0CE4CBA5A7D4267B7E38D6340CA20F53CAD773D184A576D1F2B7C624BB7CE79651D8E3196E142A5D11E5895E2573B1D0

http://w.aq.qq.com/cn/mbtoken3/mbtoken3_upgrade_determin_v2?uin=68159276&sess_id=pAEEs1YNOqZoZ4OmcLTg0AHQZUzjs3SZ&data=3C170BC265DC9C6E18CCCB7A801A2DFC68235A41672F99271F6846CC904B3700BCEE92B84424CCB1DCFD61C28CD3965198E12BCFB3DC191161666BCE47A5533B49AE5E194CC61BB91C61209443DBBD11F2D53C4F6369C9BC

http://w.aq.qq.com/cn/mbtoken3/mbtoken3_get_uin_list?sess_id=AtFxY37QHOxbpyKgLd4N6fF3Y9KQieSZ&data=2C56451DD35318604008C17BDE50176A2FFC717832F6BD78AA9F94E3F35A558F22440AD45E47B0BA53C9E1F4F400650E2A482498D7784FD81A9BE574BA87A86632EB5C9704CBE3CCECEE1EBA92F0BB3D5FC5BB0602CDD644

A34B9F777ADD59DB684D1287664B4AF6918230542C07FA69F10FA1131CD47F03A22AF207952A5A40300DB743C51742FAC70A77C07DCB6CEEA421BFA90848C48C
ED8CCC42E4585AA59773136C6548243CBFF96C5F2057D7A7EF048DF1B96F5EB17A6D42F272096F873C4F45E5181A8EC0BDDE4A9882EE00F2649D2D8C2175463A
1923D8191926F20E2947584845B75F75FF2090BE0AFA735E0DE74AE25A16CE8F87F8E2DEFCA2E4ADA7E3B76B77BC29D853537FACB3A35E6A99EACF42D2BDCA9B76F7DEAA9B42700BD33D6659D00203B5DC83FA22FA3F9B2946B3FE43DA631488C137B2B35163814486423F665BC1EB5FC1A58C4176E7B300A515A665C27CCE896D91DF5AA9B88D61DDBD3FADD990DFA511139FFD4C8DB22B
1923D8191926F20E2947584845B75F75FF2090BE0AFA735E0DE74AE25A16CE8F87F8E2DEFCA2E4ADA7E3B76B77BC29D853537FACB3A35E6A99EACF42D2BDCA9B76F7DEAA9B42700BD33D6659D00203B5DC83FA22FA3F9B2946B3FE43DA631488C137B2B35163814486423F665BC1EB5FC1A58C4176E7B300A515A665C27CCE896D91DF5AA9B88D61DDBD3FADD990DFA511139FFD4C8DB22B
1406-0871-2484-1854


91CB7DCD433F9CCC757CB853F739C782A43A3E519E2C172EFD80EE9E8EDDEE3D1CF92333149E8725
4C23ED2B6F2949E4A09680BCB02C8AC4FDA9FC031C4D7B656DEF168FE6C76F5FD416743E069C644D
05D987D5A975CFE4535938A9E18F10D8BF594124BD1F1DA8601C5D405D5C44BB928790DE67EDE0439C3063872A35363A545292B472CBC485EF877933955ADDA47370D7221B3DD20F7E74C0A39B0FA3E6CD8C9A148BADAEE2
C5F4FAADCF23C66B3ACF189D1F4DAC5C4146D3812E034E434FB6AFA906B79BE339099BAEDA8FACC8F219FC99F8B81D557CB201D428CA674B22145B64F9DC7B6AE03B1C91DEA99DDD4E5082A69382BD4ABE98BC820952C637
	token = <5>.replaceAll("-", "");
	
	<5>
	int[] arrayOfInt = <6>;
	StringBuffer localStringBuffer1 = new StringBuffer();
	int i1 = 0;
	while (true)
	{
		int i2 = arrayOfInt.length;
		if (i1 >= i2)
			break;
		int i3 = arrayOfInt[i1];
		StringBuffer localStringBuffer2 = localStringBuffer1.append(i3);
		i1 += 1;
	}
	StringBuffer localStringBuffer3 = localStringBuffer1.insert(12, 45);
	StringBuffer localStringBuffer4 = localStringBuffer1.insert(8, 45);
	StringBuffer localStringBuffer5 = localStringBuffer1.insert(4, 45);
	return localStringBuffer1.toString();
    
	<6>
	  private int[] o()
	  {
	    int[] arrayOfInt = new int[16];
	    com.tencent.token.core.encrypt.b.b localb1 = new com.tencent.token.core.encrypt.b.b(); //sha-256
	    com.tencent.token.core.encrypt.b.b localb2 = new com.tencent.token.core.encrypt.b.b();
	    byte[] arrayOfByte1 = this.a;
	    byte[] arrayOfByte2 = localb2.b(arrayOfByte1);
	    byte[] arrayOfByte3 = localb1.b(arrayOfByte2);
	    byte[] arrayOfByte4 = new byte[arrayOfByte3.length * 2];
	    int i2 = 0;
	    while (true)
	    {
	      int i3 = arrayOfByte3.length;
	      if (i2 >= i3)
	        break;
	      int i4 = i2 * 2;
	      int i5 = (byte)((arrayOfByte3[i2] & 0xFF) >>> 4);
	      arrayOfByte4[i4] = i5;
	      int i6 = i2 * 2 + 1;
	      int i7 = (byte)(arrayOfByte3[i2] & 0xF);
	      arrayOfByte4[i6] = i7;
	      i2 += 1;
	    }
	    int i1 = 0;
	    while (i1 < 16)
	    {
	      i2 = 0;
	      int i8 = 0;
	      while (i2 < 4)
	      {
	        int i9 = i2 * 16 + i1;
	        int i10 = arrayOfByte4[i9];
	        i8 += i10;
	        i2 += 1;
	      }
	      int i11 = i8 % 10;
	      arrayOfInt[i1] = i11;
	      i1 += 1;
	    }
	    if (arrayOfInt[0] == 0)
	      arrayOfInt[0] = 1;
	    return arrayOfInt;
	  }
	
	JSONObject.put("tkn_seq", token);
	JSONObject.put("password", "pwd");
	byte[] arrayOfByte = JSONObject.toString().getBytes();
		
	byte[] bb = new a().b(arrayOfByte, this.b);	//i.class, a is random? java版加密解密QQ消息 http://www.iteye.com/problems/28510
								//this.b = null; or this.b = md5(<2>);
					
	<2>			
	com.tencent.token.core.encrypt.a.c localc1 = new com.tencent.token.core.encrypt.a.c("-1", 10); //JDK BigInteger?
	com.tencent.token.core.encrypt.a.c localc2 = new com.tencent.token.core.encrypt.a.c("B8008767A628A4F53BCB84C13C961A55BF87607DAA5BE0BA3AC2E0CB778E494579BD444F699885F4968CD9028BB3FC6FA657D532F1718F581669BDC333F83DC3", 16);
    	byte[] o = com.tencent.token.core.a.d.a(<3>);	//16进制字符串转为字节数组
    
	    	<3>
		new com.tencent.token.core.encrypt.a.c("-1").a(l1, l2).a()	//divide and BitInteger转为16进制字符串 
//? modPow & toString()
	
	String out = <1>(bb);	//字节数组转为字符串
	<1>
	  public static String a(byte[] paramArrayOfByte)
	  {
	    StringBuffer localStringBuffer1 = new StringBuffer();
	    int i = 0;
	    int j = paramArrayOfByte.length;
	    if (i < j)
	    {
	      int k = paramArrayOfByte[i];
	      int m = (k & 0xF0) >>> 4;
	      char c = k & 0xF;
	      if (m > 9)
	      {
	        m = (char)(m - 10 + 65);
	        label58: if (c <= '\t')
	          break label146;
	      }
	      label146: for (c = (char)(c - '\n' + 65); ; c = (char)(c + '0'))
	      {
	        StringBuilder localStringBuilder1 = new StringBuilder();
	        String str1 = String.valueOf(m);
	        StringBuilder localStringBuilder2 = localStringBuilder1.append(str1);
	        String str2 = String.valueOf(c);
	        String str3 = str2;
	        StringBuffer localStringBuffer2 = localStringBuffer1.append(str3);
	        i += 1;
	        break;
	        int n = (char)(m + 48);
	        break label58;
	      }
	    }
	    return localStringBuffer1.toString();
	  }
	