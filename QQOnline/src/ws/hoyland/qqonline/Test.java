package ws.hoyland.qqonline;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

public class Test {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		// 数据
		final int[] buff = new int[] { 
				0x02, 0x34, 0x4B, 0x08, 0x25, 0x37,
				0x94, 0x04, 0x10, 0x07, 0x2C, 0x03, 0x00, 0x00, 0x00, 0x01,
				0x01, 0x01, 0x00, 0x00, 0x66, 0xA2, 0x00, 0x00, 0x00, 0x00,
				0x59, 0x75, 0x25, 0x3B, 0xF3, 0x91, 0x58, 0x4C, 0x07, 0xC0,
				0xC5, 0x5A, 0x1D, 0x01, 0xBB, 0x8A, 0x76, 0x4E, 0xC8, 0xE5,
				0x75, 0xA8, 0xCD, 0x6F, 0x22, 0xDA, 0xEE, 0x66, 0x08, 0xFB,
				0x0F, 0xCD, 0x82, 0x07, 0x70, 0xF4, 0x09, 0xC8, 0xC7, 0xDF,
				0xE2, 0xF1, 0xB4, 0x7F, 0x36, 0xB8, 0x57, 0x58, 0x3F, 0xDF,
				0x18, 0x82, 0x90, 0xD7, 0xE8, 0x25, 0x1F, 0xDF, 0xD0, 0x14,
				0xA6, 0x0D, 0xB0, 0x90, 0x4A, 0x08, 0xFA, 0xF3, 0xF3, 0x4B,
				0x0E, 0x04, 0xCF, 0x52, 0x88, 0x74, 0x1F, 0x52, 0x16, 0x8A,
				0x19, 0x95, 0x2E, 0x4E, 0x26, 0x0A, 0x8D, 0xA7, 0x38, 0x56,
				0x61, 0xE5, 0xDE, 0xDD, 0x56, 0x02, 0xCF, 0x47, 0xAB, 0xD8,
				0x35, 0xF6, 0xAC, 0x05, 0xB9, 0x2A, 0x10, 0xBE, 0xA1, 0x5A,
				0xF8, 0x5C, 0x6D, 0x69, 0x01, 0x0A, 0x54, 0x9B, 0x29, 0x1D,
				0x03 };

		// System.out.println(buff[6]);

		Thread t = new Thread(new Runnable() {

			@Override
			public void run() {

				try {
					// 接收
					DatagramSocket dsx = new DatagramSocket(8000); // 定义服务，监视端口上面的发送端口，注意不是send本身端口

					byte[] bufx = new byte[1024];// 接受内容的大小，注意不要溢出

					DatagramPacket dpx = new DatagramPacket(bufx, 0,
							bufx.length);// 定义一个接收的包
					while (true) {

						System.out.println("R");
						dsx.receive(dpx);// 将接受内容封装到包中

						String data = new String(dpx.getData(), 0,
								dpx.getLength());// 利用getData()方法取出内容

						System.out.println(data);// 打印内容

						dsx.close();// 关闭资源
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

			}
		});

		t.start();

		try{
			Thread.sleep(5000);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		byte[] buf = new byte[buff.length];
		for (int i = 0; i < buff.length; i++) {
			buf[i] = buff[i] > 127 ? (byte) (buff[i] - 256) : (byte) buff[i];
		}

		DatagramSocket ds = null; // 建立套间字udpsocket服务
		InetAddress destination = null;

		try {
			System.out.println("S");
			ds = new DatagramSocket(5023); // 实例化套间字，指定自己的port

			destination = InetAddress.getByName("183.60.19.100"); // 需要发送的地址
			DatagramPacket dp = new DatagramPacket(buf, buf.length,
					destination, 8000);
			// 打包到DatagramPacket类型中（DatagramSocket的send()方法接受此类，注意10000是接受地址的端口，不同于自己的端口！）

			ds.send(dp); // 发送数据
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ds.close();
		}
	}
}
